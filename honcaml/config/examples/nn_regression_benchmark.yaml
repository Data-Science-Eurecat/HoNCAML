global:
  problem_type: regression
  
steps:
  data:
    extract:
      filepath: data/processed/kc_house_data_train.csv
      features:
        - bedrooms
        - bathrooms
        - sqft_living
        - sqft_lot
        - floors
        - waterfront
        - view
        - condition
        - grade
        - sqft_above
        - sqft_basement
        - yr_built
        - yr_renovated
        - zipcode
        - lat
        - long
        - sqft_living15
        - sqft_lot15
      target:
        - price

    transform:
      normalize:
        features:
          module: sklearn.preprocessing.StandardScaler
          params:
            with_std: True
          columns:
            - sqft_living
            - sqft_lot
            - sqft_above
            - sqft_basement
            - sqft_living15
            - sqft_lot15
        target:
          module: sklearn.preprocessing.StandardScaler
          params:
            with_std: True
          columns:
            - price

  benchmark:            
    transform:
      models:
        torch:
          epochs:
            method: randint
            values: [2, 5]
          layers:
            number_blocks: [3, 6]
            types:
              - Linear + ReLU
              - Dropout
          loader:
            batch_size:
              method: randint
              values: [20, 40]
            shuffle:
              method: choice
              values:
                - True
                - False
          loss:
            method: choice
            values:
              - module: torch.nn.MSELoss
              - module: torch.nn.L1Loss
          optimizer:
            module: torch.optim.SGD
            params:
              lr: 0.001
              momentum: 0.9
      metrics: mean_absolute_percentage_error
    load:
      path: data/models
