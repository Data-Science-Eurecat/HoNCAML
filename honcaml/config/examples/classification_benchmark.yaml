global:
  problem_type: classification

steps:
  data:
    extract:
      filepath: data/processed/bank_train.csv
      target:
        - class
    
    transform:
      normalize:
        features:
          module: sklearn.preprocessing.StandardScaler
          params:
            with_std: True
          columns:
            - variance
            - skewness
  
  benchmark:
    transform:

      models:
        sklearn.ensemble.RandomForestClassifier:
          n_estimators:
            method: randint
            values: [ 2, 110 ]
          max_features:
            method: choice
            values:
              - sqrt
              - log2
              - 1 # It means 'auto'
        sklearn.neighbors.KNeighborsClassifier:
          n_neighbors:
            method: randint
            values: [ 1, 100 ]
          weights:
            method: choice
            values:
              - uniform
              - distance

      cross_validation:
        module: sklearn.model_selection.KFold
        params:
          n_splits: 2
          shuffle: True
          random_state: 90

      tuner:
        search_algorithm:
          module: ray.tune.search.optuna.OptunaSearch
          params:
        tune_config:
          num_samples: 5
          metric: accuracy_score
          mode: max
        run_config:
          stop:
            training_iteration: 2
        scheduler:
          module: ray.tune.schedulers.HyperBandScheduler
          params:

    load:
      save_best_config_params: True

  model:
    transform:
      fit:
        cross_validation:
        module: sklearn.model_selection.KFold
        params:
          n_splits: 2
          shuffle: True
          random_state: 90          

    load:
      path: data/models/
