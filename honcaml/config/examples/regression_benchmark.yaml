global:
  problem_type: regression
  
steps:
  data:
    extract:
      filepath: data/processed/kc_house_data_train.csv
      features:
        - bedrooms
        - bathrooms
        - sqft_living
        - sqft_lot
        - floors
        - waterfront
        - view
        - condition
        - grade
        - sqft_above
        - sqft_basement
        - yr_built
        - yr_renovated
        - zipcode
        - lat
        - long
        - sqft_living15
        - sqft_lot15
      target:
        - price
    
    transform:
      normalize:
        features:
          module: sklearn.preprocessing.StandardScaler
          params:
            with_std: True
          columns:
            - sqft_living
            - sqft_lot
            - sqft_above
            - sqft_basement
            - sqft_living15
            - sqft_lot15
        target:
          module: sklearn.preprocessing.StandardScaler
          params:
            with_std: True
          columns:
            - price
  
  benchmark:
    transform:
      models:
        sklearn.ensemble.RandomForestRegressor:
          n_estimators:
            method: randint
            values: [ 2, 110 ]
          max_features:
            method: choice
            values:
              - sqrt
              - log2
              - 1 # It means 'auto'
        sklearn.neighbors.KNeighborsRegressor:
          n_neighbors:
            method: randint
            values: [ 1, 100 ]
          weights:
            method: choice
            values:
              - uniform
              - distance      
    load:
      path: reports      
